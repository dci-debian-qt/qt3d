Description: make QHandle tests pass on big endian systems
Author: Dmitry Shachnev <mitya57@debian.org>
Forwarded: not-yet
Last-Update: 2016-06-15

--- a/tests/auto/core/handle/tst_handle.cpp
+++ b/tests/auto/core/handle/tst_handle.cpp
@@ -41,6 +41,12 @@
 #define private public
 #include <Qt3DCore/private/qhandle_p.h>
 
+#if Q_BYTE_ORDER == Q_BIG_ENDIAN
+#define GET_EXPECTED_HANDLE(qHandle) ((qHandle.index() << (qHandle.CounterBits + 2)) + (qHandle.counter() << 2))
+#else /* Q_LITTLE_ENDIAN */
+#define GET_EXPECTED_HANDLE(qHandle) (qHandle.index() + (qHandle.counter() << qHandle.IndexBits))
+#endif
+
 class tst_Handle : public QObject
 {
     Q_OBJECT
@@ -88,14 +94,14 @@
     QVERIFY(h.index() == 0);
     QVERIFY(h.counter() == 1);
     qDebug() << h;
-    QVERIFY(h.handle() == 65536);
+    QVERIFY(h.handle() == GET_EXPECTED_HANDLE(h));
 
     Handle h2(1, 1);
     QVERIFY(h2.isNull() == false);
     QVERIFY(h2.index() == 1);
     QVERIFY(h2.counter() == 1);
     qDebug() << h2;
-    QVERIFY(h2.handle() == 65537);
+    QVERIFY(h2.handle() == GET_EXPECTED_HANDLE(h2));
 }
 
 void tst_Handle::copyConstruction()
@@ -105,7 +111,7 @@
     QVERIFY(h2.isNull() == false);
     QVERIFY(h2.index() == 0);
     QVERIFY(h2.counter() == 1);
-    QVERIFY(h2.handle() == 65536);
+    QVERIFY(h2.handle() == GET_EXPECTED_HANDLE(h2));
 }
 
 void tst_Handle::assignment()
@@ -115,7 +121,7 @@
     QVERIFY(h2.isNull() == false);
     QVERIFY(h2.index() == 0);
     QVERIFY(h2.counter() == 1);
-    QVERIFY(h2.handle() == 65536);
+    QVERIFY(h2.handle() == GET_EXPECTED_HANDLE(h2));
 }
 
 void tst_Handle::equality()
@@ -125,7 +131,7 @@
     QVERIFY(h1.isNull() == false);
     QVERIFY(h1.index() == 2);
     QVERIFY(h1.counter() == 1);
-    QVERIFY(h1.handle() == 65538);
+    QVERIFY(h1.handle() == GET_EXPECTED_HANDLE(h1));
     QVERIFY(h1 == h2);
 }
 
@@ -136,7 +142,7 @@
     QVERIFY(h1.isNull() == false);
     QVERIFY(h1.index() == 2);
     QVERIFY(h1.counter() == 1);
-    QVERIFY(h1.handle() == 65538);
+    QVERIFY(h1.handle() == GET_EXPECTED_HANDLE(h1));
     QVERIFY(h1 != h2);
 
     Handle h3(2, 2);
@@ -161,13 +167,13 @@
     QVERIFY(h1.isNull() == false);
     QVERIFY(h1.index() == 0);
     QVERIFY(h1.counter() == 1);
-    QVERIFY(h1.handle() == 4194304);
+    QVERIFY(h1.handle() == GET_EXPECTED_HANDLE(h1));
 
     BigHandle h2(1, 1);
     QVERIFY(h2.isNull() == false);
     QVERIFY(h2.index() == 1);
     QVERIFY(h2.counter() == 1);
-    QVERIFY(h2.handle() == 4194305);
+    QVERIFY(h2.handle() == GET_EXPECTED_HANDLE(h2));
 
     QVERIFY(BigHandle::maxIndex() == (1 << 22) - 1);
     QVERIFY(BigHandle::maxCounter() == (1 << (32 - 22 - 2)) - 1);
